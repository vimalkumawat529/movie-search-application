{"ast":null,"code":"var _jsxFileName = \"/Users/vimalkumawat/Desktop/movie-search-app/src/components/SearchBar.js\",\n  _s = $RefreshSig$();\n// import React, { useState, useCallback } from \"react\";\n// import { useDispatch } from \"react-redux\";\n// import { Box, TextField } from \"@mui/material\";\n// import { fetchMovies } from \"../reducer/moviesSlice\";\n// import debounce from \"lodash.debounce\";\n\n// const SearchBar = () => {\n//   const [query, setQuery] = useState(\"\");\n//   const dispatch = useDispatch();\n\n//   // Create a debounced version of the fetchMovies function\n//   const debouncedSearch = useCallback(\n//     debounce((searchQuery) => {\n//       if (searchQuery.trim()) {\n//         dispatch(fetchMovies(searchQuery)); // Fetch data if query is not empty\n//       } else {\n//         // If query is empty, clear any previous search results (optional)\n//         dispatch(fetchMovies(\"\"));\n//       }\n//     }, 500), // Debounce delay\n//     []\n//   );\n\n//   // Handle the search input change\n//   const handleInputChange = (e) => {\n//     const newQuery = e.target.value;\n//     setQuery(newQuery); // Update the query state\n\n//     // Cancel the debounced function if input is cleared\n//     if (!newQuery.trim()) {\n//       debouncedSearch.cancel(); // Cancel any pending requests\n\n//       dispatch(fetchMovies(\"\"));\n//     }\n\n//     debouncedSearch(newQuery); // Call the debounced function\n//   };\n\n//   return (\n//     <Box\n//       sx={{\n//         display: \"flex\",\n//         justifyContent: \"center\",\n//         alignItems: \"center\",\n//         margin: 3,\n//       }}\n//     >\n//       <TextField\n//         variant=\"outlined\"\n//         label=\"Search Movies\"\n//         value={query}\n//         onChange={handleInputChange}\n//         fullWidth\n//         sx={{ maxWidth: 400 }}\n//       />\n//     </Box>\n//   );\n// };\n\n// export default SearchBar;\n\nimport React, { useState, useEffect } from \"react\";\nimport { useDispatch, useSelector } from \"react-redux\";\nimport { Box, TextField, Pagination, CircularProgress } from \"@mui/material\";\nimport { fetchMovies } from \"../reducer/moviesSlice\"; // Assuming you have the fetchMovies action\nimport MovieCard from \"./MovieCard\"; // MovieCard component\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst SearchBar = () => {\n  _s();\n  const [query, setQuery] = useState(\"\");\n  const [page, setPage] = useState(1); // Track the current page\n  const [loading, setLoading] = useState(false); // Track loading state\n  const dispatch = useDispatch();\n  const movies = useSelector(state => state.movies.items); // Get the movie items from the state\n  const totalPages = useSelector(state => state.movies.totalPages); // Assuming totalPages is in the state\n\n  const handleSearch = () => {\n    setLoading(true);\n    dispatch(fetchMovies({\n      query,\n      page\n    })).finally(() => setLoading(false)); // Set loading false once the API call is complete\n  };\n\n  // Handle page change event\n  const handlePageChange = (event, value) => {\n    setPage(value); // Update the page state\n  };\n  useEffect(() => {\n    if (query) {\n      handleSearch();\n    }\n  }, [query, page]); // Fetch movies whenever the query or page changes\n\n  return /*#__PURE__*/_jsxDEV(Box, {\n    children: [/*#__PURE__*/_jsxDEV(TextField, {\n      label: \"Search Movies\",\n      variant: \"outlined\",\n      value: query,\n      onChange: e => setQuery(e.target.value) // Update query state\n      ,\n      fullWidth: true,\n      sx: {\n        marginBottom: 2\n      }\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 94,\n      columnNumber: 7\n    }, this), loading ? /*#__PURE__*/_jsxDEV(CircularProgress, {\n      sx: {\n        display: \"block\",\n        margin: \"0 auto\"\n      }\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 104,\n      columnNumber: 9\n    }, this) : /*#__PURE__*/_jsxDEV(Box, {\n      children: [/*#__PURE__*/_jsxDEV(Box, {\n        sx: {\n          display: \"flex\",\n          flexWrap: \"wrap\",\n          justifyContent: \"center\"\n        },\n        children: movies.map(movie => /*#__PURE__*/_jsxDEV(MovieCard, {\n          movie: movie\n        }, movie.id, false, {\n          fileName: _jsxFileName,\n          lineNumber: 112,\n          columnNumber: 15\n        }, this))\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 108,\n        columnNumber: 11\n      }, this), /*#__PURE__*/_jsxDEV(Pagination, {\n        count: totalPages,\n        page: page,\n        onChange: handlePageChange,\n        color: \"primary\",\n        sx: {\n          display: \"flex\",\n          justifyContent: \"center\",\n          marginTop: 2\n        }\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 117,\n        columnNumber: 11\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 106,\n      columnNumber: 9\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 93,\n    columnNumber: 5\n  }, this);\n};\n_s(SearchBar, \"tOrh5GsjHwMnDfmGLaAT43bYQEI=\", false, function () {\n  return [useDispatch, useSelector, useSelector];\n});\n_c = SearchBar;\nexport default SearchBar;\nvar _c;\n$RefreshReg$(_c, \"SearchBar\");","map":{"version":3,"names":["React","useState","useEffect","useDispatch","useSelector","Box","TextField","Pagination","CircularProgress","fetchMovies","MovieCard","jsxDEV","_jsxDEV","SearchBar","_s","query","setQuery","page","setPage","loading","setLoading","dispatch","movies","state","items","totalPages","handleSearch","finally","handlePageChange","event","value","children","label","variant","onChange","e","target","fullWidth","sx","marginBottom","fileName","_jsxFileName","lineNumber","columnNumber","display","margin","flexWrap","justifyContent","map","movie","id","count","color","marginTop","_c","$RefreshReg$"],"sources":["/Users/vimalkumawat/Desktop/movie-search-app/src/components/SearchBar.js"],"sourcesContent":["// import React, { useState, useCallback } from \"react\";\n// import { useDispatch } from \"react-redux\";\n// import { Box, TextField } from \"@mui/material\";\n// import { fetchMovies } from \"../reducer/moviesSlice\";\n// import debounce from \"lodash.debounce\";\n\n// const SearchBar = () => {\n//   const [query, setQuery] = useState(\"\");\n//   const dispatch = useDispatch();\n\n//   // Create a debounced version of the fetchMovies function\n//   const debouncedSearch = useCallback(\n//     debounce((searchQuery) => {\n//       if (searchQuery.trim()) {\n//         dispatch(fetchMovies(searchQuery)); // Fetch data if query is not empty\n//       } else {\n//         // If query is empty, clear any previous search results (optional)\n//         dispatch(fetchMovies(\"\"));\n//       }\n//     }, 500), // Debounce delay\n//     []\n//   );\n\n//   // Handle the search input change\n//   const handleInputChange = (e) => {\n//     const newQuery = e.target.value;\n//     setQuery(newQuery); // Update the query state\n\n//     // Cancel the debounced function if input is cleared\n//     if (!newQuery.trim()) {\n//       debouncedSearch.cancel(); // Cancel any pending requests\n\n//       dispatch(fetchMovies(\"\"));\n//     }\n\n//     debouncedSearch(newQuery); // Call the debounced function\n//   };\n\n//   return (\n//     <Box\n//       sx={{\n//         display: \"flex\",\n//         justifyContent: \"center\",\n//         alignItems: \"center\",\n//         margin: 3,\n//       }}\n//     >\n//       <TextField\n//         variant=\"outlined\"\n//         label=\"Search Movies\"\n//         value={query}\n//         onChange={handleInputChange}\n//         fullWidth\n//         sx={{ maxWidth: 400 }}\n//       />\n//     </Box>\n//   );\n// };\n\n// export default SearchBar;\n\nimport React, { useState, useEffect } from \"react\";\nimport { useDispatch, useSelector } from \"react-redux\";\nimport { Box, TextField, Pagination, CircularProgress } from \"@mui/material\";\nimport { fetchMovies } from \"../reducer/moviesSlice\"; // Assuming you have the fetchMovies action\nimport MovieCard from \"./MovieCard\"; // MovieCard component\n\nconst SearchBar = () => {\n  const [query, setQuery] = useState(\"\");\n  const [page, setPage] = useState(1); // Track the current page\n  const [loading, setLoading] = useState(false); // Track loading state\n  const dispatch = useDispatch();\n  const movies = useSelector((state) => state.movies.items); // Get the movie items from the state\n  const totalPages = useSelector((state) => state.movies.totalPages); // Assuming totalPages is in the state\n\n  const handleSearch = () => {\n    setLoading(true);\n    dispatch(fetchMovies({ query, page })).finally(() => setLoading(false)); // Set loading false once the API call is complete\n  };\n\n  // Handle page change event\n  const handlePageChange = (event, value) => {\n    setPage(value); // Update the page state\n  };\n\n  useEffect(() => {\n    if (query) {\n      handleSearch();\n    }\n  }, [query, page]); // Fetch movies whenever the query or page changes\n\n  return (\n    <Box>\n      <TextField\n        label=\"Search Movies\"\n        variant=\"outlined\"\n        value={query}\n        onChange={(e) => setQuery(e.target.value)} // Update query state\n        fullWidth\n        sx={{ marginBottom: 2 }}\n      />\n\n      {loading ? (\n        <CircularProgress sx={{ display: \"block\", margin: \"0 auto\" }} />\n      ) : (\n        <Box>\n          {/* Display Movie Cards */}\n          <Box\n            sx={{ display: \"flex\", flexWrap: \"wrap\", justifyContent: \"center\" }}\n          >\n            {movies.map((movie) => (\n              <MovieCard key={movie.id} movie={movie} />\n            ))}\n          </Box>\n\n          {/* Pagination Control */}\n          <Pagination\n            count={totalPages}\n            page={page}\n            onChange={handlePageChange}\n            color=\"primary\"\n            sx={{ display: \"flex\", justifyContent: \"center\", marginTop: 2 }}\n          />\n        </Box>\n      )}\n    </Box>\n  );\n};\n\nexport default SearchBar;\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}