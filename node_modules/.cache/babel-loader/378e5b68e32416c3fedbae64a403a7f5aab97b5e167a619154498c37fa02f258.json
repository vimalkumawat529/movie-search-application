{"ast":null,"code":"var _jsxFileName = \"/Users/vimalkumawat/Desktop/movie-search-app/src/components/SearchBar.js\",\n  _s = $RefreshSig$();\n// import React, { useState, useCallback } from \"react\";\n// import { useDispatch } from \"react-redux\";\n// import { Box, TextField } from \"@mui/material\";\n// import { fetchMovies } from \"../reducer/moviesSlice\";\n// import debounce from \"lodash.debounce\";\n\n// const SearchBar = () => {\n//   const [query, setQuery] = useState(\"\");\n//   const dispatch = useDispatch();\n\n//   // Create a debounced version of the fetchMovies function\n//   const debouncedSearch = useCallback(\n//     debounce((searchQuery) => {\n//       if (searchQuery.trim()) {\n//         dispatch(fetchMovies(searchQuery)); // Fetch data if query is not empty\n//       } else {\n//         // If query is empty, clear any previous search results (optional)\n//         dispatch(fetchMovies(\"\"));\n//       }\n//     }, 500), // Debounce delay\n//     []\n//   );\n\n//   // Handle the search input change\n//   const handleInputChange = (e) => {\n//     const newQuery = e.target.value;\n//     setQuery(newQuery); // Update the query state\n\n//     // Cancel the debounced function if input is cleared\n//     if (!newQuery.trim()) {\n//       debouncedSearch.cancel(); // Cancel any pending requests\n\n//       dispatch(fetchMovies(\"\"));\n//     }\n\n//     debouncedSearch(newQuery); // Call the debounced function\n//   };\n\n//   return (\n//     <Box\n//       sx={{\n//         display: \"flex\",\n//         justifyContent: \"center\",\n//         alignItems: \"center\",\n//         margin: 3,\n//       }}\n//     >\n//       <TextField\n//         variant=\"outlined\"\n//         label=\"Search Movies\"\n//         value={query}\n//         onChange={handleInputChange}\n//         fullWidth\n//         sx={{ maxWidth: 400 }}\n//       />\n//     </Box>\n//   );\n// };\n\n// export default SearchBar;\n\n// import React, { useState, useCallback, useEffect } from \"react\";\n// import { useDispatch, useSelector } from \"react-redux\";\n// import { Box, TextField, Pagination, CircularProgress } from \"@mui/material\";\n// import { fetchMovies } from \"../reducer/moviesSlice\"; // Assuming you have the fetchMovies action\n// import MovieCard from \"./MovieCard\"; // MovieCard component\n// import debounce from \"lodash.debounce\"; // Import lodash debounce\n\n// const SearchBar = () => {\n//   const [query, setQuery] = useState(\"\"); // To store search query\n//   const [page, setPage] = useState(1); // To track current page\n//   const dispatch = useDispatch();\n//   const { movies, totalPages, loading, error } = useSelector(\n//     (state) => state.movies\n//   );\n\n//   // Create a debounced version of the fetchMovies function\n//   const debouncedSearch = useCallback(\n//     debounce((searchQuery, page) => {\n//       if (searchQuery.trim()) {\n//         dispatch(fetchMovies({ query: searchQuery, page }));\n//       } else {\n//         // If query is empty, clear any previous search results (optional)\n//         dispatch(fetchMovies({ query: \"\", page }));\n//       }\n//     }, 500), // Debounce delay of 1000ms\n//     []\n//   );\n\n//   // Handle the search input change\n//   const handleInputChange = (e) => {\n//     const newQuery = e.target.value;\n//     setQuery(newQuery); // Update query state\n//     debouncedSearch(newQuery, page); // Call the debounced function with current page\n//   };\n\n//   // Handle page change\n//   const handlePageChange = (event, value) => {\n//     setPage(value); // Update page state\n//     debouncedSearch(query, value); // Trigger search with the updated page\n//   };\n\n//   useEffect(() => {\n//     if (query.trim()) {\n//       debouncedSearch(query, page); // Call debounced function if there is a query\n//     }\n//   }, [page, query, debouncedSearch]);\n\n//   // Clean up the debounced function on component unmount\n//   useEffect(() => {\n//     return () => {\n//       debouncedSearch.cancel();\n//     };\n//   }, [debouncedSearch]);\n\n//   console.log(movies);\n\n//   return (\n//     <Box\n//       sx={{\n//         marginBottom: 2,\n//       }}\n//     >\n//       <TextField\n//         label=\"Search Movies\"\n//         variant=\"outlined\"\n//         value={query}\n//         onChange={handleInputChange} // Update query on change\n//         fullWidth\n//         sx={{\n//           marginBottom: 2,\n//           maxWidth: 400,\n//         }}\n//       />\n\n//       {loading ? (\n//         <CircularProgress sx={{ display: \"block\", margin: \"0 auto\" }} />\n//       ) : (\n//         <Box>\n//           {error && <p>{error}</p>} {/* Show error if any */}\n//           <Box\n//             sx={{ display: \"flex\", flexWrap: \"wrap\", justifyContent: \"center\" }}\n//           >\n//             {movies?.map((movie) => (\n//               <MovieCard key={movie?.id} movie={movie} />\n//             ))}\n//           </Box>\n//           {/* Pagination */}\n//           {movies.length > 0 && (\n//             <Pagination\n//               count={totalPages}\n//               page={page}\n//               onChange={handlePageChange}\n//               color=\"primary\"\n//               sx={{ display: \"flex\", justifyContent: \"center\", marginTop: 2 }}\n//             />\n//           )}\n//         </Box>\n//       )}\n//     </Box>\n//   );\n// };\n\n// export default SearchBar;\n\n// import React, { useState, useCallback, useEffect } from \"react\";\n// import { useDispatch, useSelector } from \"react-redux\";\n// import {\n//   Box,\n//   TextField,\n//   Pagination,\n//   CircularProgress,\n//   Typography,\n//   Container,\n// } from \"@mui/material\";\n// import { fetchMovies } from \"../reducer/moviesSearchSlice\"; // Assuming you have the fetchMovies action\n// import MovieCard from \"./MovieCard\"; // MovieCard component\n// import debounce from \"lodash.debounce\"; // Import lodash debounce\n// import { Link } from \"react-router-dom\";\n\n// const SearchBar = () => {\n//   const [query, setQuery] = useState(\"\"); // To store search query\n//   const [page, setPage] = useState(1); // To track current page\n//   const dispatch = useDispatch();\n//   const { movies, totalPages, loading, error } = useSelector(\n//     (state) => state.movies\n//   );\n\n//   // Create a debounced version of the fetchMovies function for query changes\n//   const debouncedSearchQuery = useCallback(\n//     debounce((searchQuery, page) => {\n//       if (searchQuery.trim()) {\n//         dispatch(fetchMovies({ query: searchQuery, page }));\n//       }\n//       //  else {\n//       //   dispatch(fetchMovies({ query: \"\", page: 1 })); // Reset results if query is empty\n//       // }\n//     }, 500), // Debounce delay of 500ms\n//     []\n//   );\n\n//   // Create a debounced version of the fetchMovies function for page changes\n//   const debouncedSearchPage = useCallback(\n//     debounce((page) => {\n//       dispatch(fetchMovies({ query, page }));\n//     }, 500),\n//     [query]\n//   );\n\n//   console.log(query);\n\n//   // Handle the search input change\n//   const handleInputChange = (e) => {\n//     const newQuery = e.target.value;\n//     setQuery(newQuery); // Update query state\n\n//     // Only trigger debounced search if input is not just spaces or empty\n//     if (newQuery.trim() !== \"\") {\n//       debouncedSearchQuery(newQuery, page); // Trigger search with debounced function for query change\n//     } else {\n//       dispatch(fetchMovies({ query: \"\", page: 1 })); // Reset search if input is empty or spaces\n//     }\n//   };\n\n//   // Handle page change\n//   const handlePageChange = (event, value) => {\n//     setPage(value); // Update page state\n//     debouncedSearchPage(value); // Trigger search with debounced function for page change\n//   };\n\n//   // Trigger the search when page or query changes\n//   useEffect(() => {\n//     if (query.trim()) {\n//       debouncedSearchQuery(query, page); // Call debounced function if there is a query\n//     }\n//   }, [page, query, debouncedSearchQuery]);\n\n//   // Clean up the debounced function on component unmount\n//   useEffect(() => {\n//     return () => {\n//       debouncedSearchQuery.cancel();\n//       debouncedSearchPage.cancel();\n//     };\n//   }, [debouncedSearchQuery, debouncedSearchPage]);\n\n//   return (\n//     <Container maxWidth=\"lg\">\n//       <Typography variant=\"h3\" align=\"center\" gutterBottom mt={5}>\n//         Movie Search App\n//       </Typography>\n//       <Box\n//         display={\"flex\"}\n//         justifyContent={\"center\"}\n//         flexDirection={\"column\"}\n//         alignItems={\"center\"}\n//       >\n//         <TextField\n//           type=\"search\"\n//           label=\"Search Movies\"\n//           variant=\"outlined\"\n//           value={query}\n//           onChange={handleInputChange} // Update query on change\n//           fullWidth\n//           sx={{\n//             marginBottom: 2,\n//             maxWidth: 400, // Set max width for input box\n//           }}\n//         />\n\n//         {loading ? (\n//           <CircularProgress sx={{ display: \"block\", margin: \"0 auto\" }} />\n//         ) : (\n//           <Box>\n//             {error && <p>{error}</p>} {/* Show error if any */}\n//             {/* If no movies found, show a \"No Movies Found\" message */}\n//             {movies?.length === 0 ? (\n//               <Typography\n//                 variant=\"h6\"\n//                 sx={{ textAlign: \"center\", marginTop: 2 }}\n//               >\n//                 No movies found.\n//               </Typography>\n//             ) : (\n//               <Box\n//                 sx={{\n//                   display: \"flex\",\n//                   flexWrap: \"wrap\",\n//                   justifyContent: \"center\",\n//                   gap: 2, // Optional: add spacing between movie cards\n//                 }}\n//               >\n//                 {movies?.map((movie) => (\n//                   <Link\n//                     to={`/movie/${movie.id}`}\n//                     sx={{ textDecoration: \"none\" }}\n//                   >\n//                     <MovieCard key={movie?.id} movie={movie} />\n//                   </Link>\n//                 ))}\n//               </Box>\n//             )}\n//             {/* Pagination */}\n//             {movies.length > 0 && (\n//               <Pagination\n//                 count={totalPages}\n//                 page={page}\n//                 onChange={handlePageChange}\n//                 color=\"primary\"\n//                 sx={{\n//                   display: \"flex\",\n//                   justifyContent: \"center\",\n//                   marginTop: 5,\n//                   marginBottom: 5,\n//                 }}\n//               />\n//             )}\n//           </Box>\n//         )}\n//       </Box>\n//     </Container>\n//   );\n// };\n\n// export default SearchBar;\n\nimport React, { useState, useCallback, useEffect } from \"react\";\nimport { useDispatch, useSelector } from \"react-redux\";\nimport { Box, TextField, Pagination, CircularProgress, Typography, Container } from \"@mui/material\";\nimport { fetchMovies } from \"../reducer/moviesSearchSlice\"; // Assuming you have the fetchMovies action\nimport MovieCard from \"./MovieCard\"; // MovieCard component\nimport debounce from \"lodash.debounce\"; // Import lodash debounce\nimport { Link } from \"react-router-dom\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst SearchBar = () => {\n  _s();\n  const [query, setQuery] = useState(localStorage.getItem(\"query\") || \"\"); // Load query from localStorage\n  const [page, setPage] = useState(1); // To track current page\n  const dispatch = useDispatch();\n  const {\n    movies,\n    totalPages,\n    loading,\n    error\n  } = useSelector(state => state.movies);\n\n  // Debounced function to search for movies based on query and page\n  const debouncedSearch = useCallback(debounce((searchQuery, page) => {\n    if (searchQuery.trim() === \"\") {\n      // If query is empty or only spaces, reset\n      dispatch(fetchMovies({\n        query: \"\",\n        page: 1\n      }));\n    } else {\n      // If query is valid, fetch the movies\n      dispatch(fetchMovies({\n        query: searchQuery,\n        page\n      }));\n    }\n  }, 500), [] // Empty dependency array to ensure debounce function is created only once\n  );\n\n  // Handle the search input change\n  const handleInputChange = e => {\n    const newQuery = e.target.value;\n    setQuery(newQuery); // Update query state\n    localStorage.setItem(\"query\", newQuery); // Store query in localStorage\n\n    // Trigger the debounced search\n    debouncedSearch(newQuery, page);\n  };\n\n  // Handle page change\n  const handlePageChange = (event, value) => {\n    setPage(value); // Update page state\n    debouncedSearch(query, value); // Trigger search for page change\n  };\n\n  // Trigger the search when page or query changes\n  useEffect(() => {\n    // Only call the debounced search if query is not empty\n    if (query.trim()) {\n      debouncedSearch(query, page);\n    } else {\n      dispatch(fetchMovies({\n        query: \"\",\n        page: 1\n      })); // Reset the search if query is empty or spaces\n    }\n  }, [page, query, debouncedSearch, dispatch]);\n\n  // Clean up the debounced function on component unmount\n  useEffect(() => {\n    return () => {\n      debouncedSearch.cancel();\n    };\n  }, [debouncedSearch]);\n  return /*#__PURE__*/_jsxDEV(Container, {\n    maxWidth: \"lg\",\n    children: [/*#__PURE__*/_jsxDEV(Typography, {\n      variant: \"h3\",\n      align: \"center\",\n      gutterBottom: true,\n      mt: 5,\n      children: \"Movie Search App\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 398,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(Box, {\n      display: \"flex\",\n      justifyContent: \"center\",\n      flexDirection: \"column\",\n      alignItems: \"center\",\n      children: [/*#__PURE__*/_jsxDEV(TextField, {\n        type: \"search\",\n        label: \"Search Movies\",\n        variant: \"outlined\",\n        value: query,\n        onChange: handleInputChange // Update query on change\n        ,\n        fullWidth: true,\n        sx: {\n          marginBottom: 2,\n          maxWidth: 400 // Set max width for input box\n        }\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 407,\n        columnNumber: 9\n      }, this), loading ? /*#__PURE__*/_jsxDEV(CircularProgress, {\n        sx: {\n          display: \"block\",\n          margin: \"0 auto\"\n        }\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 421,\n        columnNumber: 11\n      }, this) : /*#__PURE__*/_jsxDEV(Box, {\n        children: [error && /*#__PURE__*/_jsxDEV(\"p\", {\n          children: error\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 424,\n          columnNumber: 23\n        }, this), \" \", (movies === null || movies === void 0 ? void 0 : movies.length) === 0 ? /*#__PURE__*/_jsxDEV(Typography, {\n          variant: \"h6\",\n          sx: {\n            textAlign: \"center\",\n            marginTop: 2\n          },\n          children: \"No movies found.\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 426,\n          columnNumber: 15\n        }, this) : /*#__PURE__*/_jsxDEV(Box, {\n          sx: {\n            display: \"flex\",\n            flexWrap: \"wrap\",\n            justifyContent: \"center\",\n            gap: 2\n          },\n          children: movies === null || movies === void 0 ? void 0 : movies.map(movie => /*#__PURE__*/_jsxDEV(Link, {\n            to: `/movie/${movie.id}`,\n            sx: {\n              textDecoration: \"none\"\n            },\n            children: /*#__PURE__*/_jsxDEV(MovieCard, {\n              movie: movie\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 447,\n              columnNumber: 21\n            }, this)\n          }, movie.id, false, {\n            fileName: _jsxFileName,\n            lineNumber: 442,\n            columnNumber: 19\n          }, this))\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 433,\n          columnNumber: 15\n        }, this), movies.length > 0 && /*#__PURE__*/_jsxDEV(Pagination, {\n          count: totalPages,\n          page: page,\n          onChange: handlePageChange,\n          color: \"primary\",\n          sx: {\n            display: \"flex\",\n            justifyContent: \"center\",\n            marginTop: 5,\n            marginBottom: 5\n          }\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 453,\n          columnNumber: 15\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 423,\n        columnNumber: 11\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 401,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 397,\n    columnNumber: 5\n  }, this);\n};\n_s(SearchBar, \"YaEeyg8rTUcukxxjy9Me2J5gVp0=\", false, function () {\n  return [useDispatch, useSelector];\n});\n_c = SearchBar;\nexport default SearchBar;\nvar _c;\n$RefreshReg$(_c, \"SearchBar\");","map":{"version":3,"names":["React","useState","useCallback","useEffect","useDispatch","useSelector","Box","TextField","Pagination","CircularProgress","Typography","Container","fetchMovies","MovieCard","debounce","Link","jsxDEV","_jsxDEV","SearchBar","_s","query","setQuery","localStorage","getItem","page","setPage","dispatch","movies","totalPages","loading","error","state","debouncedSearch","searchQuery","trim","handleInputChange","e","newQuery","target","value","setItem","handlePageChange","event","cancel","maxWidth","children","variant","align","gutterBottom","mt","fileName","_jsxFileName","lineNumber","columnNumber","display","justifyContent","flexDirection","alignItems","type","label","onChange","fullWidth","sx","marginBottom","margin","length","textAlign","marginTop","flexWrap","gap","map","movie","to","id","textDecoration","count","color","_c","$RefreshReg$"],"sources":["/Users/vimalkumawat/Desktop/movie-search-app/src/components/SearchBar.js"],"sourcesContent":["// import React, { useState, useCallback } from \"react\";\n// import { useDispatch } from \"react-redux\";\n// import { Box, TextField } from \"@mui/material\";\n// import { fetchMovies } from \"../reducer/moviesSlice\";\n// import debounce from \"lodash.debounce\";\n\n// const SearchBar = () => {\n//   const [query, setQuery] = useState(\"\");\n//   const dispatch = useDispatch();\n\n//   // Create a debounced version of the fetchMovies function\n//   const debouncedSearch = useCallback(\n//     debounce((searchQuery) => {\n//       if (searchQuery.trim()) {\n//         dispatch(fetchMovies(searchQuery)); // Fetch data if query is not empty\n//       } else {\n//         // If query is empty, clear any previous search results (optional)\n//         dispatch(fetchMovies(\"\"));\n//       }\n//     }, 500), // Debounce delay\n//     []\n//   );\n\n//   // Handle the search input change\n//   const handleInputChange = (e) => {\n//     const newQuery = e.target.value;\n//     setQuery(newQuery); // Update the query state\n\n//     // Cancel the debounced function if input is cleared\n//     if (!newQuery.trim()) {\n//       debouncedSearch.cancel(); // Cancel any pending requests\n\n//       dispatch(fetchMovies(\"\"));\n//     }\n\n//     debouncedSearch(newQuery); // Call the debounced function\n//   };\n\n//   return (\n//     <Box\n//       sx={{\n//         display: \"flex\",\n//         justifyContent: \"center\",\n//         alignItems: \"center\",\n//         margin: 3,\n//       }}\n//     >\n//       <TextField\n//         variant=\"outlined\"\n//         label=\"Search Movies\"\n//         value={query}\n//         onChange={handleInputChange}\n//         fullWidth\n//         sx={{ maxWidth: 400 }}\n//       />\n//     </Box>\n//   );\n// };\n\n// export default SearchBar;\n\n// import React, { useState, useCallback, useEffect } from \"react\";\n// import { useDispatch, useSelector } from \"react-redux\";\n// import { Box, TextField, Pagination, CircularProgress } from \"@mui/material\";\n// import { fetchMovies } from \"../reducer/moviesSlice\"; // Assuming you have the fetchMovies action\n// import MovieCard from \"./MovieCard\"; // MovieCard component\n// import debounce from \"lodash.debounce\"; // Import lodash debounce\n\n// const SearchBar = () => {\n//   const [query, setQuery] = useState(\"\"); // To store search query\n//   const [page, setPage] = useState(1); // To track current page\n//   const dispatch = useDispatch();\n//   const { movies, totalPages, loading, error } = useSelector(\n//     (state) => state.movies\n//   );\n\n//   // Create a debounced version of the fetchMovies function\n//   const debouncedSearch = useCallback(\n//     debounce((searchQuery, page) => {\n//       if (searchQuery.trim()) {\n//         dispatch(fetchMovies({ query: searchQuery, page }));\n//       } else {\n//         // If query is empty, clear any previous search results (optional)\n//         dispatch(fetchMovies({ query: \"\", page }));\n//       }\n//     }, 500), // Debounce delay of 1000ms\n//     []\n//   );\n\n//   // Handle the search input change\n//   const handleInputChange = (e) => {\n//     const newQuery = e.target.value;\n//     setQuery(newQuery); // Update query state\n//     debouncedSearch(newQuery, page); // Call the debounced function with current page\n//   };\n\n//   // Handle page change\n//   const handlePageChange = (event, value) => {\n//     setPage(value); // Update page state\n//     debouncedSearch(query, value); // Trigger search with the updated page\n//   };\n\n//   useEffect(() => {\n//     if (query.trim()) {\n//       debouncedSearch(query, page); // Call debounced function if there is a query\n//     }\n//   }, [page, query, debouncedSearch]);\n\n//   // Clean up the debounced function on component unmount\n//   useEffect(() => {\n//     return () => {\n//       debouncedSearch.cancel();\n//     };\n//   }, [debouncedSearch]);\n\n//   console.log(movies);\n\n//   return (\n//     <Box\n//       sx={{\n//         marginBottom: 2,\n//       }}\n//     >\n//       <TextField\n//         label=\"Search Movies\"\n//         variant=\"outlined\"\n//         value={query}\n//         onChange={handleInputChange} // Update query on change\n//         fullWidth\n//         sx={{\n//           marginBottom: 2,\n//           maxWidth: 400,\n//         }}\n//       />\n\n//       {loading ? (\n//         <CircularProgress sx={{ display: \"block\", margin: \"0 auto\" }} />\n//       ) : (\n//         <Box>\n//           {error && <p>{error}</p>} {/* Show error if any */}\n//           <Box\n//             sx={{ display: \"flex\", flexWrap: \"wrap\", justifyContent: \"center\" }}\n//           >\n//             {movies?.map((movie) => (\n//               <MovieCard key={movie?.id} movie={movie} />\n//             ))}\n//           </Box>\n//           {/* Pagination */}\n//           {movies.length > 0 && (\n//             <Pagination\n//               count={totalPages}\n//               page={page}\n//               onChange={handlePageChange}\n//               color=\"primary\"\n//               sx={{ display: \"flex\", justifyContent: \"center\", marginTop: 2 }}\n//             />\n//           )}\n//         </Box>\n//       )}\n//     </Box>\n//   );\n// };\n\n// export default SearchBar;\n\n// import React, { useState, useCallback, useEffect } from \"react\";\n// import { useDispatch, useSelector } from \"react-redux\";\n// import {\n//   Box,\n//   TextField,\n//   Pagination,\n//   CircularProgress,\n//   Typography,\n//   Container,\n// } from \"@mui/material\";\n// import { fetchMovies } from \"../reducer/moviesSearchSlice\"; // Assuming you have the fetchMovies action\n// import MovieCard from \"./MovieCard\"; // MovieCard component\n// import debounce from \"lodash.debounce\"; // Import lodash debounce\n// import { Link } from \"react-router-dom\";\n\n// const SearchBar = () => {\n//   const [query, setQuery] = useState(\"\"); // To store search query\n//   const [page, setPage] = useState(1); // To track current page\n//   const dispatch = useDispatch();\n//   const { movies, totalPages, loading, error } = useSelector(\n//     (state) => state.movies\n//   );\n\n//   // Create a debounced version of the fetchMovies function for query changes\n//   const debouncedSearchQuery = useCallback(\n//     debounce((searchQuery, page) => {\n//       if (searchQuery.trim()) {\n//         dispatch(fetchMovies({ query: searchQuery, page }));\n//       }\n//       //  else {\n//       //   dispatch(fetchMovies({ query: \"\", page: 1 })); // Reset results if query is empty\n//       // }\n//     }, 500), // Debounce delay of 500ms\n//     []\n//   );\n\n//   // Create a debounced version of the fetchMovies function for page changes\n//   const debouncedSearchPage = useCallback(\n//     debounce((page) => {\n//       dispatch(fetchMovies({ query, page }));\n//     }, 500),\n//     [query]\n//   );\n\n//   console.log(query);\n\n//   // Handle the search input change\n//   const handleInputChange = (e) => {\n//     const newQuery = e.target.value;\n//     setQuery(newQuery); // Update query state\n\n//     // Only trigger debounced search if input is not just spaces or empty\n//     if (newQuery.trim() !== \"\") {\n//       debouncedSearchQuery(newQuery, page); // Trigger search with debounced function for query change\n//     } else {\n//       dispatch(fetchMovies({ query: \"\", page: 1 })); // Reset search if input is empty or spaces\n//     }\n//   };\n\n//   // Handle page change\n//   const handlePageChange = (event, value) => {\n//     setPage(value); // Update page state\n//     debouncedSearchPage(value); // Trigger search with debounced function for page change\n//   };\n\n//   // Trigger the search when page or query changes\n//   useEffect(() => {\n//     if (query.trim()) {\n//       debouncedSearchQuery(query, page); // Call debounced function if there is a query\n//     }\n//   }, [page, query, debouncedSearchQuery]);\n\n//   // Clean up the debounced function on component unmount\n//   useEffect(() => {\n//     return () => {\n//       debouncedSearchQuery.cancel();\n//       debouncedSearchPage.cancel();\n//     };\n//   }, [debouncedSearchQuery, debouncedSearchPage]);\n\n//   return (\n//     <Container maxWidth=\"lg\">\n//       <Typography variant=\"h3\" align=\"center\" gutterBottom mt={5}>\n//         Movie Search App\n//       </Typography>\n//       <Box\n//         display={\"flex\"}\n//         justifyContent={\"center\"}\n//         flexDirection={\"column\"}\n//         alignItems={\"center\"}\n//       >\n//         <TextField\n//           type=\"search\"\n//           label=\"Search Movies\"\n//           variant=\"outlined\"\n//           value={query}\n//           onChange={handleInputChange} // Update query on change\n//           fullWidth\n//           sx={{\n//             marginBottom: 2,\n//             maxWidth: 400, // Set max width for input box\n//           }}\n//         />\n\n//         {loading ? (\n//           <CircularProgress sx={{ display: \"block\", margin: \"0 auto\" }} />\n//         ) : (\n//           <Box>\n//             {error && <p>{error}</p>} {/* Show error if any */}\n//             {/* If no movies found, show a \"No Movies Found\" message */}\n//             {movies?.length === 0 ? (\n//               <Typography\n//                 variant=\"h6\"\n//                 sx={{ textAlign: \"center\", marginTop: 2 }}\n//               >\n//                 No movies found.\n//               </Typography>\n//             ) : (\n//               <Box\n//                 sx={{\n//                   display: \"flex\",\n//                   flexWrap: \"wrap\",\n//                   justifyContent: \"center\",\n//                   gap: 2, // Optional: add spacing between movie cards\n//                 }}\n//               >\n//                 {movies?.map((movie) => (\n//                   <Link\n//                     to={`/movie/${movie.id}`}\n//                     sx={{ textDecoration: \"none\" }}\n//                   >\n//                     <MovieCard key={movie?.id} movie={movie} />\n//                   </Link>\n//                 ))}\n//               </Box>\n//             )}\n//             {/* Pagination */}\n//             {movies.length > 0 && (\n//               <Pagination\n//                 count={totalPages}\n//                 page={page}\n//                 onChange={handlePageChange}\n//                 color=\"primary\"\n//                 sx={{\n//                   display: \"flex\",\n//                   justifyContent: \"center\",\n//                   marginTop: 5,\n//                   marginBottom: 5,\n//                 }}\n//               />\n//             )}\n//           </Box>\n//         )}\n//       </Box>\n//     </Container>\n//   );\n// };\n\n// export default SearchBar;\n\nimport React, { useState, useCallback, useEffect } from \"react\";\nimport { useDispatch, useSelector } from \"react-redux\";\nimport {\n  Box,\n  TextField,\n  Pagination,\n  CircularProgress,\n  Typography,\n  Container,\n} from \"@mui/material\";\nimport { fetchMovies } from \"../reducer/moviesSearchSlice\"; // Assuming you have the fetchMovies action\nimport MovieCard from \"./MovieCard\"; // MovieCard component\nimport debounce from \"lodash.debounce\"; // Import lodash debounce\nimport { Link } from \"react-router-dom\";\n\nconst SearchBar = () => {\n  const [query, setQuery] = useState(localStorage.getItem(\"query\") || \"\"); // Load query from localStorage\n  const [page, setPage] = useState(1); // To track current page\n  const dispatch = useDispatch();\n  const { movies, totalPages, loading, error } = useSelector(\n    (state) => state.movies\n  );\n\n  // Debounced function to search for movies based on query and page\n  const debouncedSearch = useCallback(\n    debounce((searchQuery, page) => {\n      if (searchQuery.trim() === \"\") {\n        // If query is empty or only spaces, reset\n        dispatch(fetchMovies({ query: \"\", page: 1 }));\n      } else {\n        // If query is valid, fetch the movies\n        dispatch(fetchMovies({ query: searchQuery, page }));\n      }\n    }, 500),\n    [] // Empty dependency array to ensure debounce function is created only once\n  );\n\n  // Handle the search input change\n  const handleInputChange = (e) => {\n    const newQuery = e.target.value;\n    setQuery(newQuery); // Update query state\n    localStorage.setItem(\"query\", newQuery); // Store query in localStorage\n\n    // Trigger the debounced search\n    debouncedSearch(newQuery, page);\n  };\n\n  // Handle page change\n  const handlePageChange = (event, value) => {\n    setPage(value); // Update page state\n    debouncedSearch(query, value); // Trigger search for page change\n  };\n\n  // Trigger the search when page or query changes\n  useEffect(() => {\n    // Only call the debounced search if query is not empty\n    if (query.trim()) {\n      debouncedSearch(query, page);\n    } else {\n      dispatch(fetchMovies({ query: \"\", page: 1 })); // Reset the search if query is empty or spaces\n    }\n  }, [page, query, debouncedSearch, dispatch]);\n\n  // Clean up the debounced function on component unmount\n  useEffect(() => {\n    return () => {\n      debouncedSearch.cancel();\n    };\n  }, [debouncedSearch]);\n\n  return (\n    <Container maxWidth=\"lg\">\n      <Typography variant=\"h3\" align=\"center\" gutterBottom mt={5}>\n        Movie Search App\n      </Typography>\n      <Box\n        display={\"flex\"}\n        justifyContent={\"center\"}\n        flexDirection={\"column\"}\n        alignItems={\"center\"}\n      >\n        <TextField\n          type=\"search\"\n          label=\"Search Movies\"\n          variant=\"outlined\"\n          value={query}\n          onChange={handleInputChange} // Update query on change\n          fullWidth\n          sx={{\n            marginBottom: 2,\n            maxWidth: 400, // Set max width for input box\n          }}\n        />\n\n        {loading ? (\n          <CircularProgress sx={{ display: \"block\", margin: \"0 auto\" }} />\n        ) : (\n          <Box>\n            {error && <p>{error}</p>} {/* Show error if any */}\n            {movies?.length === 0 ? (\n              <Typography\n                variant=\"h6\"\n                sx={{ textAlign: \"center\", marginTop: 2 }}\n              >\n                No movies found.\n              </Typography>\n            ) : (\n              <Box\n                sx={{\n                  display: \"flex\",\n                  flexWrap: \"wrap\",\n                  justifyContent: \"center\",\n                  gap: 2,\n                }}\n              >\n                {movies?.map((movie) => (\n                  <Link\n                    to={`/movie/${movie.id}`}\n                    sx={{ textDecoration: \"none\" }}\n                    key={movie.id} // Ensure each Link has a unique key\n                  >\n                    <MovieCard movie={movie} />\n                  </Link>\n                ))}\n              </Box>\n            )}\n            {movies.length > 0 && (\n              <Pagination\n                count={totalPages}\n                page={page}\n                onChange={handlePageChange}\n                color=\"primary\"\n                sx={{\n                  display: \"flex\",\n                  justifyContent: \"center\",\n                  marginTop: 5,\n                  marginBottom: 5,\n                }}\n              />\n            )}\n          </Box>\n        )}\n      </Box>\n    </Container>\n  );\n};\n\nexport default SearchBar;\n"],"mappings":";;AAAA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;;AAEA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;;AAEA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAC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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}