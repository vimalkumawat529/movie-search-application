{"ast":null,"code":"var _jsxFileName = \"/Users/vimalkumawat/Desktop/movie-search-app/src/components/SearchBar.js\",\n  _s = $RefreshSig$();\nimport React, { useState, useCallback } from \"react\";\nimport { useDispatch } from \"react-redux\";\nimport { Box, TextField } from \"@mui/material\";\nimport { fetchMovies } from \"../reducer/moviesSlice\";\nimport debounce from \"lodash.debounce\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst SearchBar = () => {\n  _s();\n  const [query, setQuery] = useState(\"\");\n  const dispatch = useDispatch();\n\n  // Create a debounced version of the fetchMovies function\n  const debouncedSearch = useCallback(debounce(searchQuery => {\n    if (searchQuery.trim()) {\n      dispatch(fetchMovies(searchQuery)); // Fetch data if query is not empty\n    } else {\n      // If query is empty, clear any previous search results (optional)\n      dispatch(fetchMovies(\"\"));\n    }\n  }, 1000),\n  // Debounce delay\n  []);\n\n  // Handle the search input change\n  const handleInputChange = e => {\n    const newQuery = e.target.value;\n    setQuery(newQuery); // Update the query state\n\n    // Cancel the debounced function if input is cleared\n    if (!newQuery.trim()) {\n      debouncedSearch.cancel(); // Cancel any pending requests\n      // Optional: Dispatch to clear previous search results (if needed)\n      dispatch(fetchMovies(\"\"));\n    }\n    debouncedSearch(newQuery); // Call the debounced function\n  };\n  return /*#__PURE__*/_jsxDEV(Box, {\n    sx: {\n      display: \"flex\",\n      justifyContent: \"center\",\n      alignItems: \"center\",\n      margin: 3\n    },\n    children: /*#__PURE__*/_jsxDEV(TextField, {\n      variant: \"outlined\",\n      label: \"Search Movies\",\n      value: query,\n      onChange: handleInputChange,\n      fullWidth: true,\n      sx: {\n        maxWidth: 400\n      }\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 48,\n      columnNumber: 7\n    }, this)\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 40,\n    columnNumber: 5\n  }, this);\n};\n_s(SearchBar, \"sbBQsPnGHF2xICiYgaBzFz0BkoA=\", false, function () {\n  return [useDispatch];\n});\n_c = SearchBar;\nexport default SearchBar;\nvar _c;\n$RefreshReg$(_c, \"SearchBar\");","map":{"version":3,"names":["React","useState","useCallback","useDispatch","Box","TextField","fetchMovies","debounce","jsxDEV","_jsxDEV","SearchBar","_s","query","setQuery","dispatch","debouncedSearch","searchQuery","trim","handleInputChange","e","newQuery","target","value","cancel","sx","display","justifyContent","alignItems","margin","children","variant","label","onChange","fullWidth","maxWidth","fileName","_jsxFileName","lineNumber","columnNumber","_c","$RefreshReg$"],"sources":["/Users/vimalkumawat/Desktop/movie-search-app/src/components/SearchBar.js"],"sourcesContent":["import React, { useState, useCallback } from \"react\";\nimport { useDispatch } from \"react-redux\";\nimport { Box, TextField } from \"@mui/material\";\nimport { fetchMovies } from \"../reducer/moviesSlice\";\nimport debounce from \"lodash.debounce\";\n\nconst SearchBar = () => {\n  const [query, setQuery] = useState(\"\");\n  const dispatch = useDispatch();\n\n  // Create a debounced version of the fetchMovies function\n  const debouncedSearch = useCallback(\n    debounce((searchQuery) => {\n      if (searchQuery.trim()) {\n        dispatch(fetchMovies(searchQuery)); // Fetch data if query is not empty\n      } else {\n        // If query is empty, clear any previous search results (optional)\n        dispatch(fetchMovies(\"\"));\n      }\n    }, 1000), // Debounce delay\n    []\n  );\n\n  // Handle the search input change\n  const handleInputChange = (e) => {\n    const newQuery = e.target.value;\n    setQuery(newQuery); // Update the query state\n\n    // Cancel the debounced function if input is cleared\n    if (!newQuery.trim()) {\n      debouncedSearch.cancel(); // Cancel any pending requests\n      // Optional: Dispatch to clear previous search results (if needed)\n      dispatch(fetchMovies(\"\"));\n    }\n\n    debouncedSearch(newQuery); // Call the debounced function\n  };\n\n  return (\n    <Box\n      sx={{\n        display: \"flex\",\n        justifyContent: \"center\",\n        alignItems: \"center\",\n        margin: 3,\n      }}\n    >\n      <TextField\n        variant=\"outlined\"\n        label=\"Search Movies\"\n        value={query}\n        onChange={handleInputChange}\n        fullWidth\n        sx={{ maxWidth: 400 }}\n      />\n    </Box>\n  );\n};\n\nexport default SearchBar;\n"],"mappings":";;AAAA,OAAOA,KAAK,IAAIC,QAAQ,EAAEC,WAAW,QAAQ,OAAO;AACpD,SAASC,WAAW,QAAQ,aAAa;AACzC,SAASC,GAAG,EAAEC,SAAS,QAAQ,eAAe;AAC9C,SAASC,WAAW,QAAQ,wBAAwB;AACpD,OAAOC,QAAQ,MAAM,iBAAiB;AAAC,SAAAC,MAAA,IAAAC,OAAA;AAEvC,MAAMC,SAAS,GAAGA,CAAA,KAAM;EAAAC,EAAA;EACtB,MAAM,CAACC,KAAK,EAAEC,QAAQ,CAAC,GAAGZ,QAAQ,CAAC,EAAE,CAAC;EACtC,MAAMa,QAAQ,GAAGX,WAAW,CAAC,CAAC;;EAE9B;EACA,MAAMY,eAAe,GAAGb,WAAW,CACjCK,QAAQ,CAAES,WAAW,IAAK;IACxB,IAAIA,WAAW,CAACC,IAAI,CAAC,CAAC,EAAE;MACtBH,QAAQ,CAACR,WAAW,CAACU,WAAW,CAAC,CAAC,CAAC,CAAC;IACtC,CAAC,MAAM;MACL;MACAF,QAAQ,CAACR,WAAW,CAAC,EAAE,CAAC,CAAC;IAC3B;EACF,CAAC,EAAE,IAAI,CAAC;EAAE;EACV,EACF,CAAC;;EAED;EACA,MAAMY,iBAAiB,GAAIC,CAAC,IAAK;IAC/B,MAAMC,QAAQ,GAAGD,CAAC,CAACE,MAAM,CAACC,KAAK;IAC/BT,QAAQ,CAACO,QAAQ,CAAC,CAAC,CAAC;;IAEpB;IACA,IAAI,CAACA,QAAQ,CAACH,IAAI,CAAC,CAAC,EAAE;MACpBF,eAAe,CAACQ,MAAM,CAAC,CAAC,CAAC,CAAC;MAC1B;MACAT,QAAQ,CAACR,WAAW,CAAC,EAAE,CAAC,CAAC;IAC3B;IAEAS,eAAe,CAACK,QAAQ,CAAC,CAAC,CAAC;EAC7B,CAAC;EAED,oBACEX,OAAA,CAACL,GAAG;IACFoB,EAAE,EAAE;MACFC,OAAO,EAAE,MAAM;MACfC,cAAc,EAAE,QAAQ;MACxBC,UAAU,EAAE,QAAQ;MACpBC,MAAM,EAAE;IACV,CAAE;IAAAC,QAAA,eAEFpB,OAAA,CAACJ,SAAS;MACRyB,OAAO,EAAC,UAAU;MAClBC,KAAK,EAAC,eAAe;MACrBT,KAAK,EAAEV,KAAM;MACboB,QAAQ,EAAEd,iBAAkB;MAC5Be,SAAS;MACTT,EAAE,EAAE;QAAEU,QAAQ,EAAE;MAAI;IAAE;MAAAC,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OACvB;EAAC;IAAAH,QAAA,EAAAC,YAAA;IAAAC,UAAA;IAAAC,YAAA;EAAA,OACC,CAAC;AAEV,CAAC;AAAC3B,EAAA,CAnDID,SAAS;EAAA,QAEIP,WAAW;AAAA;AAAAoC,EAAA,GAFxB7B,SAAS;AAqDf,eAAeA,SAAS;AAAC,IAAA6B,EAAA;AAAAC,YAAA,CAAAD,EAAA","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}